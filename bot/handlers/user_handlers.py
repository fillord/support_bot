# bot/handlers/user_handlers.py

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery

from bot.database import async_session
from bot.crud import (
    get_faq_entries,
    get_faq_by_id,
    get_faq_by_keyword,
    create_ticket,
    create_or_update_user_session,
    get_user_session,
    delete_user_session,
    get_active_operator_ids,
    get_active_ticket_by_user   # ‚Üê –∏–º–ø–æ—Ä—Ç –Ω–∞—à–µ–π –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
)
from bot.keyboards import main_menu_keyboard, faq_list_keyboard, operator_tickets_keyboard, ticket_actions_keyboard
from bot.states import OperatorStates

router = Router()

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start ===

@router.message(Command("start"))
async def cmd_start(message: Message):
    text = (
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}!\n"
        "–Ø –±–æ—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (ReplyKeyboardMarkup)
    await message.answer(text, reply_markup=main_menu_keyboard())


# === –ö–Ω–æ–ø–∫–∞ ‚Äúüìö FAQ‚Äù ===

@router.message(F.text == "üìö FAQ")
async def show_faq_list(message: Message):
    company_id = 1  # –ø–æ–∫–∞ –∂—ë—Å—Ç–∫–æ, –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –±—Ä–∞—Ç—å –∏–∑ –±–∞–∑—ã

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ FAQ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏
    async with async_session() as session:
        faqs = await get_faq_entries(session, company_id)
        simplified = [(f.id, f.question) for f in faqs]

    if not simplified:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –Ω–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ–π—á–∞—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ‚Äúbrowsing_faq‚Äù
    async with async_session() as session:
        await create_or_update_user_session(
            session,
            user_id=str(message.from_user.id),
            company_id=company_id,
            state="browsing_faq"
        )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –≤–∏–¥–µ Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=faq_list_keyboard(simplified)
    )


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –ø–æ FAQ (callback_data ‚Äúfaq:{id}‚Äù –∏–ª–∏ ‚Äúfaq:back‚Äù) ===

@router.callback_query(F.data.startswith("faq:"))
async def handle_faq_selection(callback: CallbackQuery):
    data = callback.data.split(":")
    action = data[1]
    user_id = str(callback.from_user.id)
    company_id = 1

    if action == "back":
        async with async_session() as session:
            await delete_user_session(session, user_id)
        await callback.message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard())
        await callback.answer()
        return

    entry_id = int(action)
    async with async_session() as session:
        entry = await get_faq_by_id(session, entry_id)

    if entry:
        await callback.message.answer(entry.answer, reply_markup=main_menu_keyboard())
    else:
        await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_menu_keyboard())

    async with async_session() as session:
        await delete_user_session(session, user_id)

    await callback.answer()


# === –ö–Ω–æ–ø–∫–∞ ‚Äúüë®‚Äçüíª –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º‚Äù ===

@router.message(F.text == "üë®‚Äçüíª –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
async def start_ticket_flow(message: Message):
    user_id = str(message.from_user.id)
    company_id = 1

    async with async_session() as session:
        await create_or_update_user_session(
            session,
            user_id=user_id,
            company_id=company_id,
            state="awaiting_ticket_text"
        )

    await message.answer(
        "–û–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É (–Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è). –û–¥–∏–Ω –∏–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    )


# === –ö–Ω–æ–ø–∫–∞ ‚Äú‚ÑπÔ∏è –û –∫–æ–º–ø–∞–Ω–∏–∏‚Äù ===

@router.message(F.text == "‚ÑπÔ∏è –û –∫–æ–º–ø–∞–Ω–∏–∏")
async def show_info_about_company(message: Message):
    text = (
        "üìÑ *–û –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏*\n\n"
        "–ú—ã ‚Äî –∫–æ–º–ø–∞–Ω–∏—è ¬´–ù–∞–∑–≤–∞–Ω–∏–µ¬ª.\n"
        "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω—É—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n"
        "–ù–∞—à–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –Ω–∞ —Å–≤—è–∑–∏ 24/7.\n"
        "–ê–¥—Ä–µ—Å: —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 123, –≥. –ì–æ—Ä–æ–¥.\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω: +7 (123) 456-78-90\n"
        "–°–∞–π—Ç: https://example.com\n\n"
        "_–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:_"
    )
    await message.answer(text, reply_markup=main_menu_keyboard())


# === ‚Äú–õ–æ–≤—É—à–∫–∞‚Äù –¥–ª—è –≤—Å–µ–≥–æ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–Ω–µ –Ω–∞—á–∏–Ω–∞—é—â–µ–≥–æ—Å—è —Å ‚Äú/‚Äù) ===

@router.message(~F.text.startswith("/"))
async def handle_text_during_states(message: Message):
    user_id = str(message.from_user.id)
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    async with async_session() as session:
        us = await get_user_session(session, user_id)

    # 1) –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
    if us and us.state == "awaiting_ticket_text":
        question_text = message.text.strip()

        # 1.1) –°–æ–∑–¥–∞—ë–º —Ç–∏–∫–µ—Ç
        async with async_session() as session:
            ticket = await create_ticket(
                session,
                company_id=us.company_id,
                user_id=user_id,
                question_text=question_text
            )

        # 1.2) –†–∞–∑—Å—ã–ª–∞–µ–º –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º
        operator_ids = await get_active_operator_ids(us.company_id)
        print(f"[DEBUG user_handlers] operator_ids = {operator_ids}, ticket.id = {ticket.id}")

        notif_text = (
            f"üì• <b>–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç #{ticket.id}</b>:\n\n"
            f"{ticket.question_text}\n\n"
            "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤, –Ω–∞–∂–º–∏—Ç–µ /tickets"
        )
        for op_id in operator_ids:
            try:
                print(f"[DEBUG user_handlers] –®–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É —Å ID={op_id}")
                await message.bot.send_message(
                    chat_id=op_id,
                    text=notif_text,
                    reply_markup=ticket_actions_keyboard(ticket.id, origin="open")
                )
            except Exception as e:
                print(f"[ERROR user_handlers] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ operator_id={op_id}: {e}")
                continue

        # 1.3) –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ (–æ–Ω –∑–∞–≤–µ—Ä—à–∏–ª –≤–≤–æ–¥ –ø—Ä–æ–±–ª–µ–º—ã)
        async with async_session() as session:
            await delete_user_session(session, user_id)

        # --- –®–ê–ì 4: –û—Ç–≤–µ—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É, —á—Ç–æ —Ç–∏–∫–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ---
        await message.answer(
            "–í–∞—à –∑–∞–ø—Ä–æ—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –û–ø–µ—Ä–∞—Ç–æ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏.",
            reply_markup=main_menu_keyboard()
        )
        return  # –¥–∞–ª—å—à–µ –Ω–µ –∏–¥—ë–º, —Ç.–∫. —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ —Ç–∏–∫–µ—Ç

    # 2) –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ ¬´–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ FAQ¬ª
    if us and us.state == "browsing_faq":
        keyword = message.text.strip()
        async with async_session() as session:
            results = await get_faq_by_keyword(session, us.company_id, keyword)

        if results:
            text = "–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
            simplified = []
            for entry in results:
                text += f"‚Ä¢ {entry.question}\n"
                simplified.append((entry.id, entry.question))
            await message.answer(text, reply_markup=faq_list_keyboard(simplified))
        else:
            await message.answer(
                "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"üîô –ù–∞–∑–∞–¥\" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞."
            )
        return

    # 3) –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –µ—Å–ª–∏ —É –∫–ª–∏–µ–Ω—Ç–∞ –µ—Å—Ç—å —Ç–∏–∫–µ—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º in_progress ‚Äî
    #    –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –ª—é–±–æ–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–º—É –∑–∞ —Ç–∏–∫–µ—Ç–æ–º.
    async with async_session() as session:
        active_ticket = await get_active_ticket_by_user(session, user_id)
    if active_ticket:
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ç–µ–∫—Å—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
        operator_chat_id = int(active_ticket.operator_id)
        await message.bot.send_message(
            chat_id=operator_chat_id,
            text=f"üí¨ –ö–ª–∏–µ–Ω—Ç #{active_ticket.id}: {message.text}"
        )
        return

    # 4) –ò–Ω–∞—á–µ (–µ—Å–ª–∏ –Ω–∏ FAQ, –Ω–∏ awaiting_ticket_text, –Ω–∏ in_progress) ‚Äî
    #    –ø—Ä–æ—Å—Ç–æ —à–ª—ë–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç—É
    await message.answer(
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.",
        reply_markup=main_menu_keyboard()
    )
# –î–∞–ª—å—à–µ ‚Äî –≤–∞—à –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π ¬´–ª–æ–≤–µ—Ü¬ª (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
@router.message()
async def catch_all(message: Message):
    print(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {repr(message.text)}")

@router.message(Command("test_kb"))
async def test_kb(message: Message):
    kb = main_menu_keyboard()
    print("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞:", kb)
    await message.answer("–¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã", reply_markup=kb)